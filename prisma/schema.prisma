// 관계를 맺는 필드 위에 pk,rk를 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 회원 테이블
model User {
  idx               Int         @id @default(autoincrement())
  user_id           String      @unique
  password          String?
  nickname          String      @unique
  profileImg        String      @default("")
  oauth_provider    String?
  oauth_provider_id String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  user_detail_idx Int?        //위 요소들은 본인인증을 진행했을때만 생성되야해서 옵셔널 처리
  userDetail      UserDetail?
  channel         Channel?
  ivs             IVSChannel?
  stream          Stream?
  UserTerms       UserTerms[]
}

// 유저 상세 정보 (개인정보는 암호화 AES암호화 + base64 인코딩 하여 저장)
model UserDetail {
  idx Int      @id @default(autoincrement())
  user_idx        Int      @unique
  name            String   
  sex             String   
  resident_number String   // 암호화 필요
  phone           String   // 암호화 필요
  email           String   @unique // 암호화 필요
  address         String   // 암호화 필요
  createdAt       DateTime @default(now())
  User            User     @relation(fields: [user_idx], references: [idx], onDelete: Cascade)  // 반드시 1:1 관계를 유지하도록 설정
}

// 이용약관
model Terms {
  idx     Int         @id @default(autoincrement())
  version       Float
  content       String
  effectiveDate DateTime
  createdAt     DateTime    @default(now())
  UserTerms     UserTerms[]
}

// 이용약관 동의 여부
model UserTerms {
  idx Int      @id @default(autoincrement())
  agreedAt       DateTime
  createdAt      DateTime @default(now())

  // Relations
  user_idx       Int
  terms_idx      Int
  user  User  @relation(fields: [user_idx], references: [idx], onDelete: Cascade)
  terms Terms @relation(fields: [terms_idx], references: [idx], onDelete: Cascade)

  // Constraints
  @@unique([user_idx, terms_idx]) // 한 사용자당 한 약관 버전에 대해 한 번만 동의 가능
}

// 채널 테이블
model Channel {
  user_idx          Int      @id 
  title             String   @default("")
  bookmark          Int      @default(0)
  like              Int      @default(0)
  watch             Int      @default(0)
  month_time        Int      @default(0)
  total_time        Int      @default(0)
  first_start_time  DateTime?
  createdAt         DateTime @default(now())

  // Relations
  User User @relation(fields: [user_idx], references: [idx], onDelete: Cascade)
}

// AWS IVS 채널 정보
model IVSChannel {
  user_idx          Int        @id
  arn               String?    @unique
  ingest_endpoint   String?    @unique
  playback_url      String?    @unique
  stream_key        String?    @unique
  stream_key_arn    String?    @unique
  name              String?
  createdAt         DateTime   @default(now())

  // relations
  User User @relation(fields: [user_idx], references: [idx], onDelete: Cascade)
}
// Stream 정보
// 이 정보들은 아마 서비스할때에는 redis에 복사본을 들고있다가 
// 일정 주기별로 업데이트를 하는 방식으로 사용될듯(?)
model Stream {
  user_idx        Int      @id
  play_cnt        Int      @default(0)
  like_cnt        Int      @default(0)
  thumbnail       String   @default("")
  is_adult        Boolean  @default(false)
  is_live         Boolean  @default(false)
  is_pw           Boolean  @default(false)
  start_time      DateTime?
  live_type       String?

  // Relations
  User User @relation(fields: [user_idx], references: [idx], onDelete: Cascade)
}