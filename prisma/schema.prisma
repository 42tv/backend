generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 회원 테이블
model User {
  idx               Int         @id @default(autoincrement())
  user_id           String      @unique
  password          String?
  nickname          String      @unique
  profile_img        String      @default("")
  oauth_provider    String?
  oauth_provider_id String?
  created_at         DateTime    @default(now())
  updated_at         DateTime    @updatedAt
  
  userDetail      UserDetail?
  channel         Channel?
  ivs             IVSChannel?
  stream          Stream?
  UserTerms       UserTerms[]
  coin            Coin?
  
  // Gift relations
  sentGifts      Gift[] @relation("GiftSender")
  receivedGifts  Gift[] @relation("GiftRecipient")

  // Posts relations
  sentPosts      Posts[] @relation("SentPosts")
  receivedPosts  Posts[] @relation("ReceivedPosts")
  
  // Fan relations
  fans           Fan[] @relation("UserFans")
  following      Fan[] @relation("UserFollowing")
  
  // Fan Rank Tier relation
  fanRankTiers   FanRankTier[] @relation("CreatorRankTiers")
}

// 유저 상세 정보 (개인정보는 암호화 AES암호화 + base64 인코딩 하여 저장)
model UserDetail {
  user_idx        Int      @id
  name            String   
  sex             String   
  resident_number String   // 암호화 필요
  phone           String   // 암호화 필요
  email           String   @unique // 암호화 필요
  address         String   // 암호화 필요
  created_at       DateTime @default(now())
  User            User     @relation(fields: [user_idx], references: [idx], onDelete: Cascade)  // 반드시 1:1 관계를 유지하도록 설정
}

// 이용약관
model Terms {
  idx     Int         @id @default(autoincrement())
  version       Float
  content       String
  effectiveDate DateTime
  created_at     DateTime    @default(now())
  UserTerms     UserTerms[]
}

// 이용약관 동의 여부
model UserTerms {
  idx Int      @id @default(autoincrement())
  agreedAt       DateTime
  createdAt      DateTime @default(now())

  // Relations
  user_idx       Int
  terms_idx      Int
  user  User  @relation(fields: [user_idx], references: [idx], onDelete: Cascade)
  terms Terms @relation(fields: [terms_idx], references: [idx], onDelete: Cascade)

  // Constraints
  @@unique([user_idx, terms_idx]) // 한 사용자당 한 약관 버전에 대해 한 번만 동의 가능
}

// 채널 테이블
model Channel {
  user_idx          Int      @id 
  title             String   @default("")
  bookmark          Int      @default(0)
  like              Int      @default(0)
  watch             Int      @default(0)
  month_time        Int      @default(0)
  total_time        Int      @default(0)
  first_start_time  DateTime?
  createdAt         DateTime @default(now())

  // Relations
  User User @relation(fields: [user_idx], references: [idx], onDelete: Cascade)
}

// AWS IVS 채널 정보
model IVSChannel {
  user_idx          Int        @id
  arn               String?    @unique
  ingest_endpoint   String?    @unique
  playback_url      String?    @unique
  stream_key        String?    @unique
  stream_key_arn    String?    @unique
  name              String?
  createdAt         DateTime   @default(now())

  // relations
  User User @relation(fields: [user_idx], references: [idx], onDelete: Cascade)
}
// Stream 정보
// 이 정보들은 아마 서비스할때에는 redis에 복사본을 들고있다가 
// 일정 주기별로 업데이트를 하는 방식으로 사용될듯(?)
model Stream {
  user_idx        Int      @id
  play_cnt        Int      @default(0)
  like_cnt        Int      @default(0)
  thumbnail       String   @default("")
  is_adult        Boolean  @default(false)
  is_live         Boolean  @default(false)
  is_pw           Boolean  @default(false)
  start_time      DateTime?
  live_type       String?

  // Relations
  User User @relation(fields: [user_idx], references: [idx], onDelete: Cascade)
}

// 쪽지 테이블 (유저간 메시지)
model Posts {
  idx             Int      @id @default(autoincrement())
  content         String   // 쪽지 내용
  is_read         Boolean  @default(false) // 읽음 상태
  sent_at         DateTime @default(now()) // 보낸 시간
  read_at         DateTime? // 읽은 시간
  created_at       DateTime @default(now())

  // Relations
  sender_idx      Int      // 보낸 사용자
  recipient_idx   Int      // 받는 사용자
  sender     User   @relation("SentPosts", fields: [sender_idx], references: [idx], onDelete: Cascade)
  recipient  User   @relation("ReceivedPosts", fields: [recipient_idx], references: [idx], onDelete: Cascade)
}

// 코인 정보 테이블 - 사용자별 코인 잔액 관리
model Coin {
  user_idx        Int      @id
  balance         Int      @default(0)
  total_received  Int      @default(0)
  total_spent     Int      @default(0)
  total_charged   Int      @default(0)
  last_updated    DateTime @updatedAt
  created_at       DateTime @default(now())

  // Relations
  user            User     @relation(fields: [user_idx], references: [idx], onDelete: Cascade)
}

// 선물(후원) 기록 테이블 - 사용자 간 코인 선물 기록
model Gift {
  idx             Int      @id @default(autoincrement())
  sender_idx      Int      // 선물을 보낸 사용자
  recipient_idx   Int      // 선물을 받은 사용자
  amount          Int      // 선물한 코인 양
  message         String?  // 선물과 함께 보낸 메시지
  stream_id       Int?     // 연결된 스트림 (선물이 특정 스트림에서 이루어진 경우)
  created_at       DateTime @default(now())
  
  // Relations
  sender          User     @relation("GiftSender", fields: [sender_idx], references: [idx])
  recipient       User     @relation("GiftRecipient", fields: [recipient_idx], references: [idx])
}


// 팬 관계 테이블 - 사용자간 팬 관계 관리
model Fan {
  idx             Int      @id @default(autoincrement())

  total_gifts     Int      @default(0) // 팬이 보낸 총 선물 수
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  
  // Relations
  creator_idx     Int      // 크리에이터(팔로우 당하는 사람) 인덱스
  creator         User     @relation("UserFans", fields: [creator_idx], references: [idx], onDelete: Cascade)

  fan_idx         Int      // 팬(팔로우 하는 사람) 인덱스
  fan             User     @relation("UserFollowing", fields: [fan_idx], references: [idx], onDelete: Cascade)

  rank_tier_idx   Int?     // Reference to the rank tier
  rankTier        FanRankTier? @relation(fields: [rank_tier_idx], references: [idx], onDelete: SetNull)
  
  // Ensure a user can only follow another user once
  @@unique([creator_idx, fan_idx])
}

// 팬 등급 시스템 - 각 크리에이터별 팬 등급 정의
model FanRankTier {
  idx             Int      @id @default(autoincrement())
  creator_idx     Int      // 크리에이터(등급 소유자) 인덱스
  tier_name       String   // 등급 이름 (예: "브론즈", "실버", "골드")
  donation        Int      // 해당 등급에 도달하기 위한 최소 후원 금액
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  
  // Relations
  creator         User     @relation("CreatorRankTiers", fields: [creator_idx], references: [idx], onDelete: Cascade)
  fans            Fan[]    // 이 등급을 가진 팬들
  
  // 한 크리에이터는 같은 이름의 등급을 중복해서 가질 수 없음
  @@unique([creator_idx, tier_name])
}